{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environnment';\nimport { map, shareReplay } from 'rxjs';\nimport * as countriesLib from 'i18n-iso-countries';\nimport { UsersFacade } from '../state/users.facade';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../state/users.facade\";\nexport let UsersService = /*#__PURE__*/(() => {\n  class UsersService {\n    constructor(Http, // Step 3\n    usersFacade) {\n      this.Http = Http;\n      this.usersFacade = usersFacade;\n      this.BaseUrl = environment.apiUrl;\n      this.Users = 'users';\n      countriesLib.registerLocale(require('i18n-iso-countries/langs/en.json'));\n    }\n\n    getUsers() {\n      return this.Http.get(this.BaseUrl + this.Users).pipe(shareReplay());\n    }\n\n    getUsersByID(UsersID) {\n      return this.Http.get(this.BaseUrl + `${this.Users}/${UsersID}`).pipe(shareReplay());\n    }\n\n    createUsers(data) {\n      return this.Http.post(this.BaseUrl + this.Users, data).pipe(shareReplay());\n    }\n\n    deleteUsers(UsersID) {\n      return this.Http.delete(this.BaseUrl + `${this.Users}/${UsersID}`).pipe(shareReplay());\n    }\n\n    updateUsers(data) {\n      return this.Http.put(this.BaseUrl + this.Users + '/' + data.id, data).pipe(shareReplay());\n    }\n\n    getCountries() {\n      return Object.entries(countriesLib.getNames('en', {\n        select: 'official'\n      })).map(entry => {\n        return {\n          id: entry[0],\n          name: entry[1]\n        };\n      });\n    }\n\n    getCountry(countryKey) {\n      return countriesLib.getName(countryKey, 'en');\n    }\n\n    getUsersCount() {\n      return this.Http.get(`${this.BaseUrl + this.Users}/get/count`).pipe(map(objectValue => objectValue.userCount));\n    } // Step 3\n\n\n    initAppSession() {\n      this.usersFacade.bulidUserSession();\n    }\n\n    observeCurrentUser() {\n      return this.usersFacade.currentUser$;\n    }\n\n    isCurrentUserAuthenticated() {\n      return this.usersFacade.isAuthenticated$;\n    }\n\n  }\n\n  UsersService.ɵfac = function UsersService_Factory(t) {\n    return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UsersFacade));\n  };\n\n  UsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersService,\n    factory: UsersService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsersService;\n})();","map":null,"metadata":{},"sourceType":"module"}