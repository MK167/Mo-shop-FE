{"ast":null,"code":"import { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { concatMap, of, map, catchError } from 'rxjs';\nimport * as UsersActions from './users.actions';\nimport { LocalstorageService } from '../services/localstorage.service';\nimport { UsersService } from '../services/users.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/localstorage.service\";\nimport * as i3 from \"../services/users.service\";\nexport let UsersEffects = /*#__PURE__*/(() => {\n  class UsersEffects {\n    constructor(actions$, localstorageService, usersService) {\n      this.actions$ = actions$;\n      this.localstorageService = localstorageService;\n      this.usersService = usersService; // Step 5\n\n      this.buildUserSession$ = createEffect(() => this.actions$.pipe(ofType(UsersActions.bulidUsersSession), concatMap(() => {\n        if (this.localstorageService.isValidToken()) {\n          const userId = this.localstorageService.getUserIdFromToken();\n\n          if (userId) {\n            return this.usersService.getUsersByID(userId).pipe(map(user => {\n              console.log('usr in map', user);\n              return UsersActions.bulidUsersSuccess({\n                user: user\n              });\n            }), catchError(() => of(UsersActions.bulidUsersFailure())));\n          } else {\n            return of(UsersActions.bulidUsersFailure());\n          }\n        } else {\n          return of(UsersActions.bulidUsersFailure());\n        }\n      })));\n    }\n\n  }\n\n  UsersEffects.ɵfac = function UsersEffects_Factory(t) {\n    return new (t || UsersEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.LocalstorageService), i0.ɵɵinject(i3.UsersService));\n  };\n\n  UsersEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersEffects,\n    factory: UsersEffects.ɵfac\n  });\n  return UsersEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}