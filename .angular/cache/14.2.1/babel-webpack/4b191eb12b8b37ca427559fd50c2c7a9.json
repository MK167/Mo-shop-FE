{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\"; // we did it to reduce the hard coded in code file\n\nexport const CART_KEY = \"cart\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      // make observer to add number of quantity to cart in the real time\n      // if used Subject cart = 0 after reload page becuase subject is not ready in constructor yet so next = 0, so we used BehaviorSubject\n      this.cart$ = new BehaviorSubject(this.getCart());\n    } // D-INJECTION to Inject it to products\n\n\n    intialCartLocalStorage() {\n      const cart = this.getCart();\n\n      if (!localStorage.getItem(CART_KEY)) {\n        const intialCart = {\n          items: []\n        };\n        const intialCartJson = JSON.stringify(intialCart);\n        localStorage.setItem(CART_KEY, intialCartJson);\n      } else {\n        this.cart$.next(cart);\n      }\n    }\n\n    getCart() {\n      const cartJsonString = localStorage.getItem(CART_KEY) || '{}';\n      const cart = JSON.parse(cartJsonString);\n      return cart;\n    }\n\n    setCartItem(cartItem, updateCartItem) {\n      const cart = this.getCart();\n      const cartItemExist = cart.items?.find(item => item.productId === cartItem.productId);\n\n      if (cartItemExist) {\n        cart.items?.map(item => {\n          if (item.productId === cartItem.productId) {\n            if (updateCartItem) {\n              item.quantity = cartItem.quantity;\n            } else {\n              item.quantity = item.quantity + cartItem.quantity;\n            }\n\n            return item;\n          }\n        });\n      } else {\n        cart.items?.push(cartItem);\n      }\n\n      const cartJson = JSON.stringify(cart);\n      localStorage.setItem(CART_KEY, cartJson);\n      this.cart$.next(cart);\n      return cart;\n    }\n\n    deleteCartItem(productId) {\n      const cart = this.getCart();\n      const newCart = cart?.items?.filter(item => item.productId !== productId);\n      cart.items = newCart;\n      const cartJsonString = JSON.stringify(cart);\n      localStorage.setItem(CART_KEY, cartJsonString);\n      this.cart$.next(cart);\n    }\n\n    emptyCart() {\n      const intialCart = {\n        items: []\n      };\n      const intialCartJson = JSON.stringify(intialCart);\n      localStorage.setItem(CART_KEY, intialCartJson);\n      this.cart$.next(intialCart);\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}