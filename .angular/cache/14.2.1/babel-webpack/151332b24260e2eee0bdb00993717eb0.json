{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environnment';\nimport { map, shareReplay, switchMap } from 'rxjs';\nimport { StripeService } from 'ngx-stripe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-stripe\";\nexport let OrdersService = /*#__PURE__*/(() => {\n  class OrdersService {\n    constructor(Http, stripeService) {\n      this.Http = Http;\n      this.stripeService = stripeService;\n      this.BaseUrl = environment.apiUrl;\n      this.orders = 'orders';\n      this.products = 'products';\n    }\n\n    getOrders() {\n      return this.Http.get(this.BaseUrl + this.orders).pipe(shareReplay());\n    }\n\n    getOrdersByID(ordersID) {\n      return this.Http.get(this.BaseUrl + `${this.orders}/${ordersID}`).pipe(shareReplay());\n    }\n\n    createOrders(data) {\n      return this.Http.post(this.BaseUrl + this.orders, data).pipe(shareReplay());\n    }\n\n    deleteOrders(ordersID) {\n      return this.Http.delete(this.BaseUrl + `${this.orders}/${ordersID}`).pipe(shareReplay());\n    }\n\n    updateOrders(orderStatus, orderID) {\n      return this.Http.put(this.BaseUrl + this.orders + '/' + orderID, orderStatus).pipe(shareReplay());\n    } // We add get products here to solve problem of Circular Dependancies Between libs (solution 1)\n    // We can solve this problem to create a ne base library has products and orders models and services (solution 2)\n\n\n    getProduct(productId) {\n      return this.Http.get(`${this.BaseUrl + this.products}/${productId}`);\n    }\n\n    getOrdersCount() {\n      return this.Http.get(`${this.BaseUrl + this.orders}/get/count`).pipe(map(objectValue => objectValue.orderCount));\n    }\n\n    getTotalSales() {\n      return this.Http.get(`${this.BaseUrl + this.orders}/get/totalsales`).pipe(map(objectValue => objectValue.totalsales));\n    }\n\n    createCheckoutSession(orderItem) {\n      return this.Http.post(`${this.BaseUrl + this.orders}/create-checkout-session`, orderItem).pipe(shareReplay(), switchMap(session => {\n        return this.stripeService.redirectToCheckout({\n          sessionId: session.id\n        });\n      }));\n    }\n\n    cacheOrderData(order) {\n      localStorage.setItem('orderData', JSON.stringify(order));\n    }\n\n    getCashedOrderData() {\n      return JSON.parse(localStorage.getItem('orderData') || '{}');\n    }\n\n    removeCashedOrderData() {\n      localStorage.removeItem('orderData');\n    }\n\n  }\n\n  OrdersService.ɵfac = function OrdersService_Factory(t) {\n    return new (t || OrdersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StripeService));\n  };\n\n  OrdersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrdersService,\n    factory: OrdersService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrdersService;\n})();","map":null,"metadata":{},"sourceType":"module"}